package Clases;

import Interface.Game;


public class Flappy extends Thread {

    //deklarasi variabel
    private int kecepatan;
    private boolean lompat;
    private boolean StopLompat1 = false;
    private boolean StopLompat2 = true;
    private boolean jumping = false;
    private final Game parent;
    public static boolean berhenti;

    //nge set kecepatan burung
    public Flappy (Game parent) {
        this.kecepatan = 10;
        this.parent = parent;
    }

    @Override
    //membuat fungsi agar burung bisa jalan
    public void run() {
        //set variabel
        int varA = 1;
        berhenti = false; //pendeklarasian dengan keyword boolean
        //melakukan perulangan 
        while (true) {
            // apabila berhenti maka akan dieksekusi break
            if (berhenti) {
                break;
            }
            int x = Game.jFlappy.getLocation().x;
            // apabila dalam kondisi lompat maka akan dieksekusi
            if (!isLompat()) {
                int y = Game.jFlappy.getLocation().y;
                try {
                    Thread.sleep(getKecepatan());
                    Game.jFlappy.setLocation(x, (y + 1));
                    if (kecepatan > 3) {
                        if (varA % 15 == 0) {
                            kecepatan = kecepatan - 1;
                        }
                        varA = varA + 1;
                    }
                    parent.validasiPipa();
                } catch (InterruptedException e) {
                    System.out.println("Terdapat Masalah " + e);
                }
            // apabila tidak memenuhi kondisi diatas maka akan dieksekusi ke else
            } else {
                if (!jumping) {
                    setStopLompat1(false); //pendeklarasian dengan keyword boolean
                    setStopLompat2(true);
                    jumping = true;
                    jump1();
                } else {
                    setStopLompat1(true); //pendeklarasian dengan keyword boolean
                    setStopLompat2(false);
                    jumping = false;
                    jump2();
                }
            }
            this.parent.Validasi();
        }
    }
    // LIA
    
    //membuat fungsi agar slime bisa loncat terbang
    private void jump1() {
        //deklarasi variabel
        int tempo_lompat = 1;
        //melakukan perulangan
        while (true) {
            int y = Game.jFlappy.getLocation().y;
            int x = Game.jFlappy.getLocation().x;
            //membuat statement untuk mengurung eksekusi yang menampilkan error
            try {
                Thread.sleep(getKecepatan());
                if (!isStopLompat1()) {
                    tempo_lompat = tempo_lompat + 1;
                    if (tempo_lompat <= 60) {
                        Game.jFlappy.setLocation(x, (y - 1));
                        if (tempo_lompat % 20 == 0) {
                            kecepatan = kecepatan - 1;
                        }
                    } else if (tempo_lompat >= 70) {
                        setLompat(false); //pendeklarasian dengan keyword boolean
                        setKecepatan(7);
                        break;
                    }
                    parent.validasiPipa();
                } else {
                    break;
                }
            } catch (InterruptedException e) {
                System.out.println("Terdapat Masalah " + e);
            }
        }
    }

    //membuat fungsi agar slime bisa loncat terbang
    private void jump2() {
        int tempo_lompat = 1;
        //melakukan perulangan
        while (true) {
            int y = Game.jFlappy.getLocation().y;
            int x = Game.jFlappy.getLocation().x;
            //membuat statement untuk mengurung eksekusi yang menampilkan error
            try {
                Thread.sleep(getKecepatan());
                if (!isStopLompat2()) {
                    tempo_lompat = tempo_lompat + 1;
                    if (tempo_lompat <= 60) {
                        Game.jFlappy.setLocation(x, (y - 1));
                        if (tempo_lompat % 20 == 0) {
                            kecepatan = kecepatan - 1;
                        }
                    } else if (tempo_lompat >= 70) {
                        setLompat(false); //pendeklarasian dengan keyword boolean
                        setKecepatan(7);
                        break;
                    }
                    parent.validasiPipa();
                } else {
                    break;
                }
            } catch (InterruptedException e) {
                System.out.println("Terdapat Masalah " + e);
            }
        }
    }

    public boolean isStopLompat1() {
        return StopLompat1;
    }

    public void setStopLompat1(boolean StopLompat1) {
        this.StopLompat1 = StopLompat1;
    }

    public boolean isStopLompat2() {
        return StopLompat2;
    }

    public void setStopLompat2(boolean StopLompat2) {
        this.StopLompat2 = StopLompat2;
    }

    public boolean isLompat() {
        return lompat;
    }

    public void setLompat(boolean lompat) {
        this.lompat = lompat;
    }

    public int getKecepatan() {
        return kecepatan;
    }

    public void setKecepatan(int kecepatan) {
        this.kecepatan = kecepatan;
    }

    public boolean isBerhenti() {
        return berhenti;
    }

}
